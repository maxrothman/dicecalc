CONCEPTS

dice pool
results distribution- counting results
analyzing results- std dev, at least, at most

user writes custom "rules" function
"rules" is called on every possible result
returns some result to be tabulated
user specifies analyses, which are returned as a dict
calculate(pool, rules) -> {result: probability}
class die: different input forms (num sides, start-end-[step], collection, (num, chance), etc.
	-converts to iterable usable by itertools.

--------

Better performance: pre-tabulate sets of combs of dice with the number of times each occurs, then feed each to rules once 
Possible implimentation: cache args to rules as frozenset
Complication: dice become indistinguishable (no order-dependent rules)

Analyses:
max, min, mean, median, mode, stddev, at_least(n), at_most(n)
